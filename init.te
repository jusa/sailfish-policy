## This is first draft for init.
##
## Many rules/macros are commented out since selinux environment is not 
## ready. We are missing many policy files, thus can't compile all macros.
## Some rule/macros may not be needed in Sailfish.  

########################################
#
# entrypoint executables from Linux domain.te
#

attribute named_filetrans_domain;

# Domains that are unconfined
attribute unconfined_domain_type;

# Domains that can mmap low memory.
attribute mmap_low_domain_type;

# Domains that can set their current context (perform dynamic transitions)
attribute set_curr_context;

# entrypoint executables
attribute entry_type;

# widely-inheritable file descriptors
attribute privfd;

# constraint related attributes

# [1] types that can change SELinux identity on transition
attribute can_change_process_identity;

# [2] types that can change SELinux role on transition
attribute can_change_process_role;

# [3] types that can change the SELinux identity on a filesystem
# object or a socket object on a create or relabel
attribute can_change_object_identity;

# [3] types that can change to system_u:system_r
attribute can_system_change;

# [4] types that have attribute 1 can change the SELinux
# identity only if the target domain has this attribute.
# Types that have attribute 2 can change the SELinux role
# only if the target domain has this attribute.
attribute process_user_target;

# For cron jobs
# [5] types used for cron daemons
attribute cron_source_domain;

# [6] types used for cron jobs
attribute cron_job_domain;

# [7] types that are unconditionally exempt from
# SELinux identity and role change constraints
attribute process_uncond_exempt;	# add userhelperdomain to this one



########################################
#
# Declarations
#

# used for direct running of init scripts
# by admin domains
attribute direct_run_init;
attribute direct_init;
attribute direct_init_entry;

attribute init_script_domain_type;
attribute init_script_file_type;
attribute init_run_all_scripts_domain;
attribute initrc_transition_domain;
# Attribute used for systemd so domains can allow systemd to create sock_files
attribute init_sock_file_type;

# Mark process types as daemons
attribute daemon;
attribute systemprocess;
attribute systemprocess_entry;

# Mark process types as initrc domain
attribute initrc_domain;

# Mark file type as a daemon run directory
attribute daemonrundir;

########################################
#
# 
#
type unlabeled_t;
type sysctl_type;
type proc_mdstat_t;
type debugfs_t;
type bpf_t;
type hugetlbfs_t;
type pstore_t;
type autofs_t;
type binfmt_misc_fs_t;
type nsfs_t;

typealias proc_security alias proc_security_t;

# Added for sailfish. Remove if corecommands.te is added.
typealias shell_exec alias shell_exec_t;

#
#attribute device_node;


########################################
#
# init_t is the domain of the init process.
#
type init_t, initrc_transition_domain, domain;
type init_exec_t;
domain_type(init_t)
domain_entry_file(init_t, init_exec_t)
domain_role_change_exemption(init_t)
domain_subj_id_change_exemption(init_t)
kernel_domtrans_to(init_t, init_exec_t)

allow init_t kernel:fd use;
allow init_t kernel:fifo_file rw_inherited_fifo_file_perms;
allow init_t kernel:process sigchld;

type_transition kernel init_exec_t:process init_t;
type_transition kernel init_exec_t:process init_t;

allow kernel init_exec_t:file exec_file_perms;
allow kernel init_t:process transition; 


##########################################################

type_transition init_t init_exec_t:process unconfined_t;


###########################################################

  # ERROR 'unknown role system_r' 
  ##role system_r types init_t;
role r types init_t;

init_initrc_domain(init_t)
corecmd_shell_entry_type(init_t)

#
# init_tmp_t is the type for content in /tmp directory
#
type init_tmp_t;
files_tmp_file(init_tmp_t)

#
# init_var_run_t is the type for /var/run/shutdown.pid.
#
type init_var_run_t;
files_pid_file(init_var_run_t)

#
# init_var_lib_t is the type for /var/lib/systemd
#
type init_var_lib_t;
files_type(init_var_lib_t)

type machineid_t;
files_config_file(machineid_t)

#
# initctl_t is the type of the named pipe created
# by init during initialization.  This pipe is used
# to communicate with init.
#
type initctl_t;
files_type(initctl_t)

    ##mls_trusted_object(initctl_t)


########################################
#
# initrc_t domain
#
type initrc_t, initrc_domain, init_script_domain_type, init_run_all_scripts_domain;
type initrc_exec_t, init_script_file_type;
domain_type(initrc_t)
domain_entry_file(initrc_t, initrc_exec_t)

    # ERROR 'unknown role system_r' 
    ##role system_r types initrc_t;
role r types initrc_t;

# should be part of the true block
# of the below init_upstart tunable
# but this has a typeattribute in it
corecmd_shell_entry_type(initrc_t)

    ##corecmd_bin_entry_type(initrc_t)

type initrc_devpts_t;
    ##term_pty(initrc_devpts_t)
files_type(initrc_devpts_t)

type initrc_state_t;
files_type(initrc_state_t)

type initrc_tmp_t;
files_tmp_file(initrc_tmp_t)

type initrc_var_log_t;
    ##logging_log_file(initrc_var_log_t)

type initrc_var_run_t;
files_pid_file(initrc_var_run_t)

    ##ifdef(`enable_mls',`
    ##	kernel_ranged_domtrans_to(init_t, init_exec_t, s0 - mls_systemhigh)
    ##')

########################################
#
# Init local policy
#

# Use capabilities. old rule:
allow init_t self:capability { audit_control audit_write sys_module };
allow init_t self:capability2 { mac_admin mac_override };
    ##allow init_t self:cap_userns all_cap_userns_perms;
allow init_t self:tcp_socket { listen accept };
allow init_t self:packet_socket create_socket_perms;
allow init_t self:key manage_key_perms;
    ##allow init_t self:bpf { map_create map_read map_write prog_load prog_run };

# is ~sys_module really needed? observed:
# sys_boot
# sys_tty_config
# kill: now provided by domain_kill_all_domains()
# setuid (from /sbin/shutdown)
# sys_chroot (from /usr/bin/chroot): now provided by corecmd_chroot_exec_chroot()

allow init_t self:fifo_file rw_fifo_file_perms;

    ##allow init_t self:service manage_service_perms;

# Re-exec itself
    ##can_exec(init_t, init_exec_t)

# executing content in /run/initramfs
    ##manage_files_pattern(init_t, initrc_state_t, initrc_state_t)
    ##can_exec(init_t, initrc_state_t)

allow daemon initrc_t:unix_dgram_socket sendto;
allow init_t initrc_t:unix_stream_socket { connectto create_stream_socket_perms };
allow init_t initrc_t:tcp_socket create_stream_socket_perms;
allow initrc_t init_t:unix_stream_socket { connectto rw_stream_socket_perms sendto };
allow initrc_t init_t:fifo_file rw_fifo_file_perms;

manage_files_pattern(init_t, init_tmp_t, init_tmp_t)
manage_dirs_pattern(init_t, init_tmp_t, init_tmp_t)
manage_lnk_files_pattern(init_t, init_tmp_t, init_tmp_t)

    ##files_tmp_filetrans(init_t, init_tmp_t, { file })

manage_dirs_pattern(init_t, init_var_lib_t, init_var_lib_t)
manage_files_pattern(init_t, init_var_lib_t, init_var_lib_t)
manage_lnk_files_pattern(init_t, init_var_lib_t, init_var_lib_t)
manage_sock_files_pattern(init_t, init_var_lib_t, init_var_lib_t)
    ##files_var_lib_filetrans(init_t, init_var_lib_t, { dir file })
allow init_t init_var_lib_t:dir mounton;
allow init_t init_var_lib_t:file map;

manage_dirs_pattern(init_t, init_var_run_t, init_var_run_t)
manage_files_pattern(init_t, init_var_run_t, init_var_run_t)
manage_lnk_files_pattern(init_t, init_var_run_t, init_var_run_t)
manage_sock_files_pattern(init_t, init_var_run_t, init_var_run_t)
manage_fifo_files_pattern(init_t, init_var_run_t, init_var_run_t)

    ## neverallow on line 202 domain.te violated by allow init_t init_t:capability { mknod }
    ##manage_blk_files_pattern(init_t, init_var_run_t, init_var_run_t)
    ##manage_chr_files_pattern(init_t, init_var_run_t, init_var_run_t)

    ##files_pid_filetrans(init_t, init_var_run_t, { dir file blk_file chr_file fifo_file})
allow init_t init_var_run_t:dir mounton;
allow init_t init_var_run_t:file mounton;
allow init_t init_var_run_t:sock_file relabelto;
allow init_t init_var_run_t:blk_file { getattr relabelto };
allow init_t init_var_run_t:chr_file { getattr relabelto };
allow init_t init_var_run_t:fifo_file { getattr relabelto };

allow init_t machineid_t:file manage_file_perms;
    ##files_pid_filetrans(init_t, machineid_t, file, "machine-id")
    ##files_etc_filetrans(init_t, machineid_t, file, "machine-id")
allow init_t machineid_t:file mounton;

allow init_t initctl_t:fifo_file manage_fifo_file_perms;
    ##dev_filetrans(init_t, initctl_t, fifo_file)

# Modify utmp.
allow init_t initrc_var_run_t:file { rw_file_perms setattr };

    #kernel_read_system_state(init_t)
    #kernel_share_state(init_t)
    #kernel_stream_connect(init_t)
    #kernel_rw_stream_socket_perms(init_t)
    #kernel_rw_unix_dgram_sockets(init_t)
    #kernel_mounton_systemd_ProtectKernelTunables(init_t)
    #kernel_read_core_if(init_t)
    #kernel_mounton_core_if(init_t)
    #kernel_get_sysvipc_info(init_t)

    # There is bug in kernel in 4.16 where lot of domains requesting module_request, for now dontauditing
    #kernel_dontaudit_request_load_module(init_t)

    #corecmd_exec_chroot(init_t)
    #corecmd_exec_bin(init_t)

    #corenet_all_recvfrom_netlabel(init_t)
    #corenet_tcp_bind_all_ports(init_t)
    #corenet_udp_bind_all_ports(init_t)

    #dev_create_all_chr_files(init_t)
dev_list_sysfs(init_t)
dev_manage_sysfs(init_t)
dev_read_urand(init_t)
    #dev_read_raw_memory(init_t)
# Early devtmpfs
    #dev_rw_generic_chr_files(init_t)
dev_filetrans_all_named_dev(init_t)
dev_write_watchdog(init_t)
dev_rw_inherited_input_dev(init_t)
dev_rw_dri(init_t)

domain_getpgid_all_domains(init_t)
domain_kill_all_domains(init_t)
domain_signal_all_domains(init_t)
domain_signull_all_domains(init_t)
domain_sigstop_all_domains(init_t)
domain_sigchld_all_domains(init_t)
domain_read_all_domains_state(init_t)
domain_getattr_all_domains(init_t)
domain_setrlimit_all_domains(init_t)
domain_rlimitinh_all_domains(init_t)
    #domain_noatsecure_all_domains(init_t)

    #files_read_config_files(init_t)
    #files_read_all_pids(init_t)
    #files_map_all_pids(init_t)
    #files_read_system_conf_files(init_t)
    #files_rw_generic_pids(init_t)
    #files_dontaudit_search_isid_type_dirs(init_t)
    #files_read_isid_type_files(init_t)
    #files_read_etc_runtime_files(init_t)
    #files_manage_all_locks(init_t)
    #files_manage_etc_runtime_files(init_t)
    #files_manage_etc_symlinks(init_t)
    #files_etc_filetrans_etc_runtime(init_t, file)
    # Run /etc/X11/prefdm:
    #files_exec_etc_files(init_t)
    #files_read_usr_files(init_t)
    #files_write_root_dirs(init_t)
    # file descriptors inherited from the rootfs:
    #files_dontaudit_rw_root_files(init_t)
    #files_dontaudit_rw_root_chr_files(init_t)
    #files_dontaudit_mounton_modules_object(init_t)
    #files_manage_mnt_dirs(init_t)
    #files_manage_mnt_files(init_t)
    #files_mounton_etc(init_t)

    #fs_list_inotifyfs(init_t)
    # cjp: this may be related to /dev/log
    #fs_write_ramfs_sockets(init_t)

    #fs_read_efivarfs_files(init_t)
    #fs_read_nfsd_files(init_t)

    #fstools_getattr_swap_files(init_t)

    #mcs_process_set_categories(init_t)

    #mls_file_read_all_levels(init_t)
    #mls_file_write_all_levels(init_t)
    #mls_file_downgrade(init_t)
    #mls_file_upgrade(init_t)
    #mls_fd_use_all_levels(init_t)
    #mls_fd_share_all_levels(init_t)
    #mls_process_set_level(init_t)
    #mls_process_write_down(init_t)
    #mls_socket_read_all_levels(init_t)
    #mls_socket_write_all_levels(init_t)
    #mls_rangetrans_source(init_t)

    #selinux_set_all_booleans(init_t)
    #selinux_load_policy(init_t)
    #selinux_mounton_fs(init_t)
    #allow init_t security_t:security load_policy;

    #selinux_compute_access_vector(init_t)
    #selinux_compute_create_context(init_t)
    #selinux_compute_user_contexts(init_t)
    #selinux_validate_context(init_t)
    #selinux_unmount_fs(init_t)

    #term_create_pty_dir(init_t)
    #term_use_unallocated_ttys(init_t)
    #term_use_console(init_t)
    #term_use_all_inherited_terms(init_t)
    #term_use_generic_ptys(init_t)
    #term_use_usb_ttys(init_t)
    #term_use_virtio_console(init_t)

# Run init scripts.
#init_domtrans_script(init_t)
init_exec_notrans_direct_init_entry(init_t)

    #libs_rw_ld_so_cache(init_t)

    #logging_create_devlog_dev(init_t)
    #logging_send_syslog_msg(init_t)
    #logging_send_audit_msgs(init_t)
    #logging_rw_generic_logs(init_t)
    #logging_mmap_generic_logs(init_t)
    #logging_relabel_devlog_dev(init_t)
    #logging_manage_audit_config(init_t)
    #logging_create_syslog_netlink_audit_socket(init_t)
    #logging_write_var_log_dirs(init_t)
    #logging_manage_var_log_symlinks(init_t)

    #seutil_read_config(init_t)
    #seutil_read_login_config(init_t)
    #seutil_read_default_contexts(init_t)
    #seutil_read_module_store(init_t)

    #miscfiles_manage_localization(init_t)
    #miscfiles_filetrans_named_content(init_t)

    #udev_manage_rules_files(init_t)

    #userdom_use_user_ttys(init_t)
    #userdom_manage_tmp_dirs(init_t)
    #userdom_manage_tmp_sockets(init_t)
    #userdom_delete_user_tmp_files(init_t)
    #userdom_delete_user_home_content_files(init_t)
    #userdom_connectto_stream(init_t)

userdom_transition_login_userdomain(init_t)
userdom_noatsecure_login_userdomain(init_t)
userdom_sigchld_login_userdomain(init_t)
    #userdom_use_user_ptys(init_t)

allow init_t self:process setsched;

corecmd_shell_domtrans(init_t, initrc_t)

    #storage_raw_rw_fixed_disk(init_t)

    #sysnet_read_dhcpc_state(init_t)

    #allow init_t self:system all_system_perms;
allow init_t self:unix_dgram_socket { create_socket_perms sendto };
allow init_t self:process { setkeycreate setsockcreate setfscreate setrlimit setexec };
allow init_t self:process { getcap setcap };
allow init_t self:unix_stream_socket { create_stream_socket_perms connectto recvfrom };
allow init_t self:netlink_kobject_uevent_socket create_socket_perms; 
allow init_t self:netlink_selinux_socket create_socket_perms;
allow init_t self:unix_dgram_socket lock;
    #allow init_t self:bluetooth_socket { create_socket_perms listen };
# Until systemd is fixed
allow daemon init_t:socket_class_set { getopt read getattr ioctl setopt write };
allow init_t self:udp_socket create_socket_perms;
allow init_t self:netlink_route_socket create_netlink_socket_perms;

allow init_t initrc_t:unix_dgram_socket create_socket_perms;

kernel_list_unlabeled(init_t)
kernel_read_network_state(init_t)
kernel_rw_all_sysctls(init_t)
kernel_rw_security_state(init_t)
    # neverallow on line 281 of domain.te violated by allow init_t usermodehelper
kernel_rw_usermodehelper_state(init_t)
kernel_read_software_raid_state(init_t)
kernel_unmount_debugfs(init_t)
kernel_setsched(init_t)

dev_write_kmsg(init_t)
dev_write_urand(init_t)
dev_rw_lvm_control(init_t)
dev_rw_autofs(init_t)
dev_manage_generic_symlinks(init_t)
dev_manage_generic_dirs(init_t)
dev_manage_generic_files(init_t)
dev_read_generic_chr_files(init_t)
dev_relabel_generic_dev_dirs(init_t)
dev_relabel_all_dev_nodes(init_t)
dev_relabel_all_dev_files(init_t)
dev_manage_sysfs_dirs(init_t)
dev_relabel_sysfs_dirs(init_t)
dev_rw_wireless(init_t)

    #files_search_all(init_t)
    #files_mounton_all_mountpoints(init_t)
    #files_mounton_etc(init_t)
    #files_unmount_all_file_type_fs(init_t)
    #files_mounton_kernel_symbol_table(init_t)
    #files_manage_all_pid_dirs(init_t)
    #files_write_all_pid_sockets(init_t)
    #files_manage_etc_dirs(init_t)
    #files_manage_generic_tmp_dirs(init_t)
    #files_relabel_all_pid_dirs(init_t)
    #files_relabel_all_pid_files(init_t)
    #files_create_all_pid_sockets(init_t)
    #files_delete_all_pids(init_t)
    #files_exec_generic_pid_files(init_t)
    #files_create_all_pid_pipes(init_t)
    #files_create_all_spool_sockets(init_t)
    #files_delete_all_spool_sockets(init_t)
    #files_create_var_lib_dirs(init_t)
    #files_create_var_lib_symlinks(init_t)
    #files_manage_urandom_seed(init_t)
    #files_list_locks(init_t)
    #files_list_spool(init_t)
    #files_list_var(init_t)
    #files_write_var_dirs(init_t)
    #files_manage_var_symlinks(init_t)
    #files_setattr_var_dirs(init_t)
    #files_list_boot(init_t)
    #files_list_home(init_t)
    #files_create_lock_dirs(init_t)
    #files_relabel_all_lock_dirs(init_t)
    #files_relabel_var_dirs(init_t)
    #files_relabel_var_lib_dirs(init_t)
    #files_read_kernel_modules(init_t)
    #files_map_kernel_modules(init_t)
    #files_dontaudit_mounton_isid(init_t)
    #files_delete_tmp_files(init_t)
    #fs_getattr_all_fs(init_t)
fs_manage_cgroup_dirs(init_t)
fs_manage_cgroup_files(init_t)
fs_manage_bpf_dirs(init_t)
fs_manage_bpf_files(init_t)
fs_manage_hugetlbfs_dirs(init_t)
fs_manage_tmpfs_dirs(init_t)
fs_relabel_tmpfs_blk_file(init_t)
fs_relabel_tmpfs_chr_file(init_t)
fs_relabel_pstore_dirs(init_t)
fs_relabel_tmpfs_dirs(init_t)
fs_relabel_tmpfs_files(init_t)
fs_relabel_tmpfs_fifo_files(init_t)
fs_mount_all_fs(init_t)
fs_unmount_all_fs(init_t)
fs_remount_all_fs(init_t)
fs_list_all(init_t)
fs_list_auto_mountpoints(init_t)
fs_register_binary_executable_type(init_t)
fs_relabel_tmpfs_sock_file(init_t)
fs_rw_tmpfs_files(init_t)	
fs_relabel_cgroup_dirs(init_t)
fs_search_cgroup_dirs(init_t)
# for network namespaces
fs_read_nsfs_files(init_t)

    #storage_getattr_removable_dev(init_t)

    #term_relabel_ptys_dirs(init_t)

    #auth_relabel_login_records(init_t)
    #auth_relabel_pam_console_data_dirs(init_t)

    #clock_read_adjtime(init_t)

init_read_script_state(init_t)

    #modutils_read_module_config(init_t)

    #seutil_read_file_contexts(init_t)

    #systemd_exec_systemctl(init_t)
    #systemd_manage_home_content(init_t)
systemd_manage_unit_dirs(init_t)
    #systemd_manage_random_seed(init_t)
systemd_manage_all_unit_files(init_t)
systemd_logger_stream_connect(init_t)
    #systemd_login_manage_pid_files(init_t)
    #systemd_config_all_services(init_t)
systemd_relabelto_fifo_file_passwd_run(init_t)
systemd_relabel_unit_dirs(init_t)
systemd_relabel_unit_files(init_t)
systemd_relabel_unit_symlinks(init_t)
systemd_manage_unit_dirs(initrc_t)
systemd_manage_unit_symlinks(initrc_t)
    #systemd_config_all_services(initrc_t)
    #systemd_read_unit_files(initrc_t)
    #systemd_login_status(init_t)
    #systemd_map_networkd_exec_files(init_t)
    #systemd_map_resolved_exec_files(init_t)
    #systemd_rfkill_setattr_lib(init_t)
    #systemd_rfkill_mounton_var_lib(init_t)
    #systemd_rfkill_manage_lib_dirs(init_t)
    #systemd_timedated_mounton_var_lib(init_t)
    #systemd_timedated_manage_lib_dirs(init_t)

    #create_sock_files_pattern(init_t, init_sock_file_type, init_sock_file_type)

    #create_dirs_pattern(init_t, var_log_t, var_log_t)

    #auth_use_nsswitch(init_t)
    #auth_rw_login_records(init_t)
    #auth_domtrans_chk_passwd(init_t)
    #auth_manage_passwd(init_t)

########################################
#
# Init script local policy
#

allow initrc_t self:process { getpgid setsched setpgid setrlimit getsched };
allow initrc_t self:capability ~{ sys_ptrace audit_control audit_write sys_admin sys_module };
allow initrc_t self:capability2 block_suspend;
dontaudit initrc_t self:capability { sys_ptrace sys_module }; # sysctl is triggering this
allow initrc_t self:passwd rootok;
allow initrc_t self:key manage_key_perms;

# Allow IPC with self
allow initrc_t self:unix_dgram_socket create_socket_perms;
allow initrc_t self:unix_stream_socket { create listen accept ioctl read getattr write setattr append bind connect getopt setopt shutdown connectto };
allow initrc_t self:tcp_socket create_stream_socket_perms;
allow initrc_t self:udp_socket create_socket_perms;
allow initrc_t self:fifo_file rw_file_perms;

allow initrc_t initrc_devpts_t:chr_file rw_term_perms;
    #term_create_pty(initrc_t, initrc_devpts_t)

# Going to single user mode
    #init_telinit(initrc_t)

#########################################
#
# Temp rules for current Sailfish policy
#

#============= init_t ==============
allow init_t auditd_tmpfs:file { getattr open read };
allow init_t console_device:chr_file { ioctl open write };
allow init_t node:tcp_socket node_bind;
allow init_t port:tcp_socket name_bind;
allow init_t self:capability { net_admin net_bind_service net_raw sys_tty_config };
allow init_t self:netlink_audit_socket nlmsg_relay;
allow init_t self:tcp_socket { bind create setopt };
allow init_t selinuxfs:file write;
allow init_t systemd_journald_t:fd use;
allow init_t systemd_journald_t:unix_stream_socket { read write };
allow init_t systemd_logind_t:process { noatsecure siginh };
allow init_t systemd_update_utmp_t:process { noatsecure siginh };



