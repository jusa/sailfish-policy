
##############################
#
# refpolerr(message)
#
# print an error message.  does not
# make anything fail.
#
define(`refpolicyerr',`errprint(__file__:__line__: Error: `$1'__endline__)')


##############################
#
# For use in interfaces, to optionally insert a require block
#
# Note, comment out original gen_require macro since Android 
# checkmodule dont recognize require and will also give error 
# from redefined type params.
# See external/selinux/checkpolicy/policy_scan.l
# 
#define(`gen_require',`
#	ifdef(`self_contained_policy',`
#		ifdef(`__in_optional_policy',`
#			require { 
#				$1 
#			} # end require 
#		') dnl
#	',`require { $1 } # end require
#	')
#')
define(`gen_require',`# require')

# helper function, since m4 wont expand macros
# if a line is a comment (#):
define(`policy_m4_comment',`
##### $2 depth: $1
')dnl

define(`policy_call_depth',0)

##############################
#
# In the future interfaces should be in loadable modules
#
# template(name,rules)
#
define(`template',` dnl
	ifdef(`$1',`refpolicyerr(`duplicate definition of $1(). Original definition on '$1.) define(`__if_error')',`define(`$1',__line__)') dnl
	define(`$1',` dnl
	pushdef(`policy_call_depth',incr(policy_call_depth)) dnl
	policy_m4_comment(policy_call_depth,begin `$1'(dollarsstar)) dnl
	$2
	popdef(`policy_call_depth') dnl
	policy_m4_comment(policy_call_depth,end `$1'(dollarsstar)) dnl
	')
')

#############################
#
# In the future interfaces should be in loadable modules
#
# interface(name,rules)
# 
#
define(`interface',` dnl
    ifdef(`$1',`refpolicyerr(`duplicate definition of $1(). Original definition on '$1.) define(`__if_error')',`define(`$1',__line__)') dnl
	define(`$1',` dnl
#	pushdef(`policy_call_depth',incr(policy_call_depth)) dnl
	policy_m4_comment(policy_call_depth,begin `$1'(dollarsstar)) dnl
	$2
#	popdef(`policy_call_depth') dnl
	policy_m4_comment(policy_call_depth,end `$1'(dollarsstar)) dnl
	')
')

